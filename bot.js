import { Bot, InlineKeyboard, session } from 'grammy'
import 'dotenv/config'
import { sequelize } from './config/sequelize.js'
import { User } from './models/User.js'
import { hydrateReply, parseMode } from '@grammyjs/parse-mode'
import { conversations, createConversation } from '@grammyjs/conversations'
import { getFilmConversation } from './conversations/getFilmConversation.js'
import { addFilmConversation } from './conversations/addFilmConversation.js'

const bot = new Bot(process.env.TOKEN)
bot.use(hydrateReply)
bot.use(
	session({
		initial() {
			return {}
		},
	})
)

// Install the conversations plugin.
bot.use(conversations())

bot.use(createConversation(getFilmConversation))
bot.use(createConversation(addFilmConversation))

bot.api.config.use(parseMode('HTML'))

bot.command('start', async ctx => {
	try {
		const user = await User.findOne({ where: { tgId: ctx.from.id } })
		if (!user) {
			await User.create({ tgId: ctx.from.id })
		}

		let inline
		if (user.isAdmin === true) {
			inline = new InlineKeyboard()
				.text('üé• –í–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞', 'enterFilmCode')
				.text('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º', 'addFilm')
		} else {
			inline = new InlineKeyboard().text(
				'üé• –í–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞',
				'enterFilmCode'
			)
		}
		await ctx.reply(
			'<b>üé¨ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∏–Ω–æ —Å –ö–∏–Ω–æ–ë—É–º!</b>  \n\n<i>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –æ–≥—Ä–æ–º–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ñ–∏–ª—å–º–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤, —á—Ç–æ–±—ã –æ–∫—É–Ω—É—Ç—å—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.</i> \n\n<b>üçø –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üí´</b>',
			{ reply_markup: inline }
		)
	} catch (e) {
		console.log(e)
	}
})

bot.callbackQuery('home', async ctx => {
	try {
		await ctx.answerCallbackQuery()
		const user = await User.findOne({ where: { tgId: ctx.from.id } })
		let inline
		if (user.isAdmin === true) {
			inline = new InlineKeyboard()
				.text('üé• –í–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞', 'enterFilmCode')
				.text('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º', 'addFilm')
		} else {
			inline = new InlineKeyboard().text(
				'üé• –í–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞',
				'enterFilmCode'
			)
		}
		await ctx.reply(
			'<b>üé¨ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∏–Ω–æ —Å –ö–∏–Ω–æ–ë—É–º!</b>  \n\n<i>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –æ–≥—Ä–æ–º–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ñ–∏–ª—å–º–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤, —á—Ç–æ–±—ã –æ–∫—É–Ω—É—Ç—å—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.</i> \n\n<b>üçø –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üí´</b>',
			{ reply_markup: inline }
		)
	} catch (e) {
		console.log(e)
	}
})

bot.callbackQuery('enterFilmCode', async ctx => {
	try {
		await ctx.answerCallbackQuery()
		await ctx.conversation.enter('getFilmConversation')
	} catch (e) {
		console.log(e)
	}
})

bot.callbackQuery('addFilm', async ctx => {
	try {
		await ctx.answerCallbackQuery()
		await ctx.conversation.enter('addFilmConversation')
	} catch (e) {
		console.log(e)
	}
})

sequelize.sync()

bot.start()
